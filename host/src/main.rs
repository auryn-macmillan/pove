// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use fhe::bfv::{BfvParametersBuilder, PublicKey, SecretKey};
use fhe_traits::Serialize;
use methods::{POVE_ELF, POVE_ID};
use rand::thread_rng;
use risc0_zkvm::{default_prover, ExecutorEnv};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // For example:
    let degree: u64 = 1024;
    let plaintext_modulus: u64 = 65537;
    let moduli: Vec<u64> = vec![1152921504606584833];

    let params = BfvParametersBuilder::new()
        .set_degree(degree as usize)
        .set_plaintext_modulus(plaintext_modulus)
        .set_moduli(&moduli)
        .build_arc()
        .unwrap();

    let mut rng = thread_rng();
    let sk = SecretKey::random(&params, &mut rng);
    let pk = PublicKey::new(&sk, &mut rng);

    // Input data
    let input: Vec<u64> = vec![0, 1];

    let env = ExecutorEnv::builder()
        .write(&params.to_bytes())
        .unwrap()
        .write(&pk.to_bytes())
        .unwrap()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, POVE_ELF).unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // For example:
    let _output: Vec<u8> = receipt.journal.decode().unwrap();

    println!("Proof generated successfully!");

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(POVE_ID).unwrap();
}
